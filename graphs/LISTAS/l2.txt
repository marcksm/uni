1.Seja k o numero de vértices em um grafo, um passeio é uma sequencia de vértices v1, v2, v3, ..., vk tal que o arco vi-v(i+1) pertence ao grafo com i = 1,...k-1, estes arcos são denominados arcos de passeio.
Um caminho em um grafo é um passeio que não repete arcos, e um caminho simples é um caminho que não repete vértices. Logo todo caminho simples é um caminho, mas nem todo caminho é simples. 

----------------
Suponha que s a t não é um caminho, logo existe um arco v-w que repete em s a t, mas
como v-w repetiu, temos que os vértices v e w repetiram, logo s a t não é caminho simples, contradição
----------------
2.Suponha por contradição que não é topológico, logo para algum arco i-j, temos que 
i>=j, mas pelo conjunto de arcos dados para todo i-j i < j, temos que isso contradiz, logo é topológico

3. (?)

int topoVerify(Graph G, int *vv, int V) {
    for (Vertex v = 0; v < G->V; v++)
        for (Vertex w = 0; w < G->V; w++)
            if (G->adj[v][w] == 1 && vv[v] >= vv[u]) return 0;
    return 1;
}

4. (V-1) + (V-2) + (V-3) + ... + (V-V)
A maior quantidade de arcos em um vertice é quando dado um vertice qualquer v, ele recebe arcos de todos os vertices i tal que topo[i]<topo[v]. Fazendo essa indução para todos os vértices do grafo, temos a maior quantidade de arcos no grafo.

5 ????????????????????????

6 int GRAPHhigh (Graph G, int p[]) {

    for (int i = 0; i < G->V; i++) {
        temp = high(p, i);
        if (temp > profundidade) {
            profundidade = temp;
        }
    }
    return profundidade;
}

int high (int p[], int k) {
    if (p[k] != k) {
        return high (p, p[k]) + 1;
    }
    return 0;
}

7.

p[] = {0,1,2,3,4,5,6}
p[] = {0,1,2,3,4,5,0.} 6
p[] = {0,1,5.,3,4,5,0.} 6, 2
p[] = {0,2.,5.,3,4,5,0.} 6, 2, 1,
p[] = {3.,2.,5.,3,4,5,0.} 6, 2, 1, 0
p[] = {3.,2.,5.,3,3.,5,0.} 6, 2, 1, 0, 4
p[] = {3.,2.,5.,3,3.,3.,0.} 6, 2, 1, 0, 4, 5
p[] = {3.,2.,5.,3.,3.,3.,0.} 6, 2, 1, 0, 4, 5

                    ----3----
                    |   |   |
                    0   4   5
                    |       |
                    6       2
                            |
                            1

Graph GRAPHbuildRandRootedTree(int V) {
    Graph G = GRAPHinit(V);
    int *p = malloc (p * sizeof (int));
    int *marked = malloc (p * sizeof (int));
    for (int i = 0; i < G->V; i++) {
        marked[i] = i;
    }
    for (int i = 0; i < G->V; i++) {
        p[i] = randmarked (marked, i, G->V);
    }  
    for (int i = 0; i < G->V; i++) {
        GRAPHinsertArc (G, p[i], i);
    }
    return G;
}

int randmarked (int *marked, int i, int V) {
    int randrange;
    int temp;
    randrange = rand(i, V); //no intervalo
    temp = marked[randrange];
    marked[randrange] = marked[i];
    return temp;
}

8.

int GRAPHreach (Graph G, Vertex s, Vertex v) {
    int visited[G->V];
    int total = 0;
    link p;
    for (int i = 0; i < G->V; i++) visited[i] = 0;
    visited[s] = -1;
    current = s;
    while (current != -1) {
        visited[current] = -1;
        for (p = G->adj[current]; p != NULL; p = p->next) {
            Vertex w = p->w;
            if (visited[w] == 0);visited[w] = 1;
            if (w == v) return 1;
        }
        current = -1;
        for (int i = 0; i < G->V; i++) {
            if (visited[i] == 1) {current = i; break;}
        }
    }
    return 0;
}























