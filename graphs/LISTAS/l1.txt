1) Contando apenas os grafos não isomorfos, temos que um conjunto de V vértices e A arestas, 
pode formar n grafos, onde n é combinação de V(V-1) tomado a A. Pois claramente V(V-1) é o total
de arcos possíveis com V vértices, e com isso basta checarmos a quantidade de combinações possíveis 
com os A arcos. Assim teremos ( V(V-1)   A).

2) Cada arco tem duas ponta, significando um grau de saida e um grau de incidencia no outro vértice,
então para todo arco P, seu grau é 2. Somando todos os arcos de um grafo SUM 2, temos que é 2|A|
(duas vezes o numero de arcos), mas como queremos apenas a soma do grau de saida, basta dividir por
2, logo |A| (numero de arcos)
------------------------------------
2) versao do prof ver foto


3)
Utilizando matriz O(V^2)

Graph GRAPHorinted?_M (Graph G) {
  int i, j;
  for (i = 0; i < G->V; i++)
    for (j = 0; j < G->V; j++)
      if (i != j)
        if (G->adj[i][j] != G->adj[j][i]) return 0;
  return 1;
}

Utilizando lista ?
-
-
-
-

4) 
Utilizando matriz O(V)

int GRAPHdeg_M (Vertex v, Graph G) {
  int i, grau = 0;
  for (i = 0; i < G->V; i++) {
    if (G->adj[i][v] == 1) grau++;
    if (G->adj[v][i] == 1) grau++;
  }
  return grau;
}

Utilizando lista O(V^2)

int GRAPHdeg_L (Vertex v, Graph G) {
  int i, p,  grau = 0;
  for (p = G->adj[v]; p != NULL; p = p->next) 
    grau++;
  for (i = 0; i < G->V; i++)
    for (p = G->adj[v]; p != NULL; p = p->next) 
      if (p->w == v) grau++;
  return grau;
}

5)

Utilizando matriz O(V)

int GRAPHisolated_M (Vertex v, Graph G) {
  int i;
  for (i = 0; i < G->V; i++)
    if (G->adj[v][i] != 0 || G->adj[v][i] != 0) return 0;
  return 1;
}

Utilizando lista O(V+A)

int GRAPHisolated_L (Vertex v, Graph G) {
  int i, p;
  for (i = 0; i < G-> V; i++)
    for (p = G->adj[i]; p != NULL; p = p->next)
      if (p->w == v || i == v) return 0;
  return 1;
}

6)

Utilizando matriz O(1)

int GRAPHadj_M (Vertex v, Vertex w, Graph G) {
  if (G->adj[v][w] == 1) return 1;
  return 0;
}

Utilizando lista O(V)

int GRAPHadj_L (Vertex v, Vertex w, Graph G) {
  int p;
  for (p = G->adj[v]; p != NULL; p = p->next)
    if (p->w == w) return 1;
  return 0;
}

7)

Graph GRAPHbuildKnight (int n) {
  int i, x, l, c;
  Graph G = GRAPHinit (n * n);
  for (i = 0; i < G->V; i++) {
    l = i/n;
    c = i%n;
    x = (l + 2)*n + (c + 1);
    if (dentro_do_tabuleiro (l+2, c+1, n)) 
     GRAPHinsertArc (G, i, x);  
    x = (l + 1)*n + (c + 2);
    if (dentro_do_tabuleiro (l+1, c+2, n)) 
     GRAPHinsertArc (G, i, x);  
    x = (l - 2)*n + (c + 1);
    if (dentro_do_tabuleiro (l-2, c+1, n)) 
     GRAPHinsertArc (G, i, x);  
    x = (l -1)*n + (c + 2);
    if (dentro_do_tabuleiro (l-1, c+2, n)) 
     GRAPHinsertArc (G, i, x);  
    x = (l + 2)*n + (c - 1);
    if (dentro_do_tabuleiro (l+2, c-1, n)) 
     GRAPHinsertArc (G, i, x);  
    x = (l + 1)*n + (c - 2);
    if (dentro_do_tabuleiro (l+1, c-2, n)) 
     GRAPHinsertArc (G, i, x);  
    x = (l - 2)*n + (c - 1);
    if (dentro_do_tabuleiro (l-2, c-1, n)) 
     GRAPHinsertArc (G, i, x);  
    x = (l - 1)*n + (c - 2);
    if (dentro_do_tabuleiro (l-1, c-2, n)) 
     GRAPHinsertArc (G, i, x);  
  }
  return G;
}


int dentro_do_tabuleiro (int x, int y, int n) {
  if (x >= 0 && x < n && y >=0 && y < n) return 1;
  return 0;
}



FAZER O DO CUBO

















































