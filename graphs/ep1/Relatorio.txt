Para compilar: make

Primeiro programa: PI
./pi [número de casas analisadas]

Saida:
[Outdegree do vertice i]-i: j1 j2 ... jk
onde i->j1, i->j2, ... i->jk são arcos

Essa heuristica adiciona um arco entre os vértices de dois digitos seguidos do PI
Não é aleatório, uma vez que a entrada é sempre a mesma e a heuristica deterministica.
Fato curioso que o grafo se torna completo como 606 casas de PI.

---------------------------------------------------------------------------------------
Segundo programa: text
./text < (entrada)
Saida:
[Outdegree do vertice i]-i: j1 j2 ... jk
onde i->j1, i->j2, ... i->jk são arcos

Esse programa recebe na entrada padrão um stream de texto, e tem uma heuristica
parecida com a do PI, ele cria um arco entre os vértices de duas letras seguidas
na mesma palavra, ignorando numeros e caracteres especiais.
Não é aleatório para a mesma entrada.
Esse é mais complicado encontrar um número de letras para completar o grafo, pois cada
texto difere, e cada ligua tambem. Textos em portugues raramente terão o arco y->z

---------------------------------------------------------------------------------------
Terceiro programa: randtocomplete
./randtocomplete [tamanho do grafo]
Esse programa busca mostrar quantos vértices aleatórios são necessários gerar utilizando
a função vista em sala de aula randV (Graph G); para que um grafo de tamanho indicado 
seje completo.
Nesse caso para a mesma entrada é aleatório, variando bastante para numeros grandes.
Claro que existe um número minimo de arcos para que o grafo seje completo, o valor 
aleatório varia acima deste valor.
