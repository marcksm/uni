class RandomQueue  {
   static int s, e, N;
   static int[] queue;
   public static String toString(int item) {
      int rank = item % 13;
      int suit = item / 13;
      String ranks = "23456789TJQKA";
      String suits = "CDHS";
      return ranks.charAt(rank) + "" + suits.charAt(suit);
   }
   static void RandomQueue() {
      queue = new int[N+1];
      s = 0;
      e = 0;
   }
   static int sample () {
      if (isEmpty()) return -1;
      int x = StdRandom.uniform (s, e);
      return x;
   }
   static void enqueue (int card) {
      if (e == queue.length) resize (2*N);
      queue[e++] = card;
   }
   static int dequeue () {
      if (isEmpty()) return -1;
      int x = StdRandom.uniform (s, e);
      int aux = queue[e-1];
      queue[e-1] = queue[x];
      queue[x] = aux;
      aux = queue[e-1];
      e--;
      return aux;
   }
   static boolean isEmpty () {
      if (s == e) return true;
      else return false;

   }
   static void resize (int cap) {
      int i = 0;
      int[] buffer = new int[cap];
      for (i = s; i < N; i++) buffer[i-s] = queue[i];
      s = 0;
      e = i;
      queue = buffer;
      N = 2*N;
   }
}

public class TesteVisual {
   static boolean exist (int buff[], int m[][], int N, int k) {
      int i, j;
      for (i = 0; i < k; i++) {
         for (j = N-1; j >= 0; j--) 
            if (buff[j] != m[i][j]) break;
         if (j < 0) { 
            m[i][N]++; 
            return true;
         }
      }
      return false;
   }
   public static void main (String[] args) {
      RandomQueue.N = Integer.parseInt (args[0]);
      int N  = RandomQueue.N;
      int T = Integer.parseInt (args[1]);
      int j = 0, k = 0;
      int[][] m = new int[T][N+1];
      int[] buff = new int[N];
      while (j < T) {
         RandomQueue.RandomQueue(); 
         for (int i = 1; i <= N; i++) RandomQueue.enqueue (i);
         for (int i = 0; i < N; i++) buff[i] = RandomQueue.dequeue();
         if (!exist (buff, m, N, k)) { 
            for (int i = 0; i < N; i++) m[k][i] = buff[i];
            m[k][N] = 1;
            k++;
         }
         j++;
      }
      int[] freq = new int[k];
      for (int i = 0; i < k; i++) freq[i] = m[i][N];


      /*for (int i = 0; i < k; i++) {
         for (j = 0; j <= N; j++) { 
            StdOut.printf ("%d ", m[i][j]);
         }
         StdOut.println();
      }*/
   }

}























